subsystem = NFIRAOS
component = timing

description = Timing Assembly commands.

receive = [

  {
    name            = init
    description     = """
Request Command.

Prepares the assembly for operation and reads configuration files. The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

If the configuration name is not specified, then a default configuration name and version is used. If the configuration version is not specified, then the default version is used for the specified configuration name.
  
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = unindexed | indexed
</ul>
At Completion:
<ul>
<li> state.cmd = ready
</ul>
    """
    args = [
       {
        name        = configuration name 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configuration version
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """
Request Command.

This command will internally trigger a stop if required.
  
Precondition:
<ul>
<li> state.cmd = ready | error
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
</ul>
    """
  }

  {
    name            = stop
    description     = """
Request Command.
    
Stop all trigger signals and stop following WFS delay stream from the AOESW.
  
Precondition:
<ul>
<li> state.cmd = ready | error
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
</ul>
    """
  }

  {
    name            = enableTrigger
    description     = """
Request Command.

Start the specified trigger signal. The start time specifies the time at which the first trigger pulse will be generated. If the start time has already elapsed then the first trigger pulse will occur at the next possible multiple of the period from the start time.  
  
Precondition:
<ul>
<li> state.cmd = ready | error
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
</ul>
    """
    args = [
      {
        name        = channel
        description = specific trigger signal to start
        enum        = [ LGS, PWFS, CHANNEL-A, CHANNEL-B, CHANNEL-C, CHANNEL-D, CHANNEL-E, CHANNEL-F, ALL ]
      }
      {
          name        = period
          description = period of the trigger pulses
          type        = double
          minimum     = 1.25
          units       = milliseconds
      }
      {
          name        = startTime
          description = time at which the first pulse of the trigger signal should occur.
          type        = double
      }
    ]
  }

  {
    name            = disableTrigger
    description     = """
Request Command.

Stop the specified trigger signal. 
  
Precondition:
<ul>
<li> state.cmd = ready | error
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
</ul>
    """
    args = [
      {
        name        = channel
        description = specific trigger signal to start
        enum        = [ LGS, PWFS, CHANNEL-A, CHANNEL-B, CHANNEL-C, CHANNEL-D, CHANNEL-E, CHANNEL-F, ALL ]
      }
    ]
  }


  {
    name            = follow
    description     = """
Request Command.

Enable or disable the WFS delay follow mode. When the follow mode is enabled, the pulse delay generator will track the delay values from RPG. This delay value is applied relative to the start time and period specified in the start command for all channels.
  
Precondition:
<ul>
<li> state.cmd = ready | error
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = (enable == true) ? continuous : ready
</ul>
  """
   args = [
      {
        name        = enable
        description = flag indicating if the trigger channel is enabled
        type        = boolean
      }
    ]

  }


  {
    name            = delay
    description     = """
Request Command.

Apply a delay to a trigger signal. This delay value is applied relative to the period and start time specified by the start command for the given channel.
  
Precondition:
<ul>
<li> state.cmd = ready | error
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
</ul>
  """
    args = [
      {
        name        = channel
        description = specific trigger signal to delay
        enum        = [ LGS, PWFS, CHANNEL-A, CHANNEL-B, CHANNEL-C, CHANNEL-D, CHANNEL-E, CHANNEL-F, ALL ]
      }
      {
          name        = delay
          description = phase delay time relative to the period and start time
          type        = double
          units       = milliseconds
      }
    ]
  }


]

