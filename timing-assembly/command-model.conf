subsystem = NFIRAOS
component = timing

description = Timing Assembly commands.

receive = [

  {
    name            = init
    description     = """Request Command.

Prepares the assembly for operation and reads configuration files. The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """Request Command.

This command will internally trigger a stop if required.
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = stop
    description     = """Request Command.
    
Stop all trigger signals and stop following WFS delay stream from the AOESW.
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> trigger.enable[] = false
</ul>"""
  }

  {
    name            = enableTrigger
    description     = """Request Command.

Start the specified trigger signal. The start time specifies the time at which the first trigger pulse will be generated, subject to the phase delay. If the start time has already elapsed then the first trigger pulse will occur at the next possible multiple of the period from the start time.  

The trigger pulse will occur at: <br>
t<sub>0</sub> = startTime + delay <br>
t<sub>n</sub> = t<sub>n-1</sub> + period <br>
where: <br>
delay = delayOffset + delayGain * sodiumLayer.rangeDistance 

If delayOffset and/or delayGain are not specified then they are assumed to be zero.

Channels A to F are allocated for instrument OIWFSs and ODGWs. It is up to the AOSQ to known which instruments detectors are physically connected to which NFIRAOS trigger channelA through F (TBD, it is possible the NCC can abstract this information through config files).

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
<li> trigger.enable[{input channel}] = true
<li> trigger.period[{input channel}] = {input period}
<li> trigger.startTime[{input channel}] = {input startTime}
<li> trigger.delayOffset[{input channel}] = {input delayOffset}
<li> trigger.delayGain[{input channel}] = {input delayGain}
</ul>"""
    args = [
      {
        name        = channel
        description = specific trigger signal to start
        enum        = [ LGS, PWFS, CHANNEL_A, CHANNEL_B, CHANNEL_C, CHANNEL_D, CHANNEL_E, CHANNEL_F, ALL ]
      }
      {
          name        = period
          description = period of the trigger pulses
          type        = double
          minimum     = 1250
          units       = microseconds
      }
      {
          name        = startTime
          description = "time at which the first pulse of the trigger signal should occur, subject to the phase delay"
          type        = double
          units       = "TAI / PTP"
      }
      {
          name        = delayOffset
          description = phase delay offset to the start time of the trigger signal 
          type        = double
          units       = microseconds
      }
      {
          name        = delayGain
          description = "phase delay gain that related sodium layer range distance to a phase delay relative to the start time of the trigger signal. This value should be approximately equal to <sup>2</sup>/(<sub>speed of light</sub>)"
          type        = double
          units       = "<sup>microseconds</sup>/<sub>km</sub>"
      }
    ]
    requiredArgs = [ channel, period, startTime ]
  }

  {
    name            = disableTrigger
    description     = """Request Command.

Stop the specified trigger signal. The cmd state will remain CONTINUOUS if any trigger signal is still enabled after this command is complete. 
  
Precondition:
<ul>
<li> state.cmd = CONTINUOUS
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY | CONTINUOUS
<li> trigger.enable[{input channel}] = false
</ul>"""
    args = [
      {
        name        = channel
        description = specific trigger signal to stop
        enum        = [ LGS, PWFS, CHANNEL_A, CHANNEL_B, CHANNEL_C, CHANNEL_D, CHANNEL_E, CHANNEL_F, ALL ]
      }
    ]
    requiredArgs = [ channel ]
  }

]

