subsystem = NFIRAOS
component = timing

description = Timing Assembly commands.

receive = [

  {
    name            = init
    description     = """Request Command.

Prepares the assembly for operation and reads configuration files. The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = UNINDEXED | INDEXED
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """Request Command.

This command will internally trigger a stop if required.
  
Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = stop
    description     = """Request Command.
    
Stop all trigger signals and stop following WFS delay stream from the AOESW.
  
Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> trigger.enable[] = false
</ul>"""
  }

  {
    name            = enableTrigger
    description     = """Request Command.

Start the specified trigger signal. The start time specifies the time at which the first trigger pulse will be generated. If the start time has already elapsed then the first trigger pulse will occur at the next possible multiple of the period from the start time.  

Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> trigger.enable[{input channel}] = true
<li> trigger.period[{input channel}] = {input period}
<li> trigger.startTime[{input channel}] = {input startTime}
<li> trigger.delay[{input channel}] = 0
</ul>"""
    args = [
      {
        name        = channel
        description = specific trigger signal to start
        enum        = [ LGS, PWFS, CHANNEL_A, CHANNEL_B, CHANNEL_C, CHANNEL_D, CHANNEL_E, CHANNEL_F, ALL ]
      }
      {
          name        = period
          description = period of the trigger pulses
          type        = double
          minimum     = 1.25
          units       = milliseconds
      }
      {
          name        = startTime
          description = time at which the first pulse of the trigger signal should occur.
          type        = double
      }
    ]
    requiredArgs = [ channel, period, startTime ]
  }

  {
    name            = disableTrigger
    description     = """Request Command.

Stop the specified trigger signal. 
  
Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> trigger.enable[{input channel}] = false
</ul>"""
    args = [
      {
        name        = channel
        description = specific trigger signal to start
        enum        = [ LGS, PWFS, CHANNEL_A, CHANNEL_B, CHANNEL_C, CHANNEL_D, CHANNEL_E, CHANNEL_F, ALL ]
      }
    ]
    requiredArgs = [ channel ]
  }


  {
    name            = follow
    description     = """Request Command.

Enable the WFS delay follow mode. When the follow mode is enabled, the pulse delay generator will track the delay values from AOESW. This delay value is applied relative to the start time and period specified in the start command for all channels.
  
Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
</ul>"""
  }

]

