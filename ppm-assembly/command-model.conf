subsystem = NFIRAOS
component = ppm

description = PPM Assembly commands.

receive = [
 {
    name            = init
    description     = """Initialize the assembly and read configuration files. 

The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }


{
    name            = datum
    description     = """Submit Command.

Datum both the PPM stages. This command will internally trigger a stop if required.
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = DATUMING
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = DATUMED
<li> state.select = EXTRACT
<li> state.onTarget = true
</ul>"""
  }

  {
    name            = stop
    description     = """Immediate Command.

Cancel the current submit type command, stop all SS LGS stages and turn off all LGS simulation sources.
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = UNDATUMED | DATUMED
<li> state.select = EXTRACT | DEPLOY | INTERMEDIATE | UNKNOWN
<li> state.onTarget = true | false
</ul>"""
  }

  {
    name            = move
    description     = """Submit Command.

Engineering command to move individual PPM stages to the specified positions.

At least one input parameter must be specified, all unspecified stages will remain unchanged. 
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.move = DATUMED | MOVING
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = MOVING
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = DATUMED
<li> state.select = EXTRACT | DEPLOY | INTERMEDIATE
<li> state.onTarget = true
</ul>"""
    args = [
      {
        name        = deploy
        description = "target position of the PPM deploy stage."
        type        = double
        units       = TBD
      }
      {
        name        = rotation
        description = "target position PPM rotation stage."
        type        = double
        units       = degree
      }
    ]
  }

  {
    name            = deploy
    description     = """Submit Command.

Select to deploy or extracts the PPM. This command can also be used to set the PPM rotation angle, however the rotation input can only be specified if the PPM is set to deploy. 
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.move = DATUMED | MOVING
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = MOVING
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = DATUMED
<li> state.select = EXTRACT | DEPLOY
<li> state.onTarget = true
</ul>"""
    args = [
      {
        name        = deploy
        description = flag indicating if the PPM should be deployed.
        type        = boolean
      }
      {
        name        = rotation
        description = "target position PPM rotation stage."
        type        = double
        units       = degree
        minimum     = 0 
        maximum     = 360
      }
    ]
    requiredArgs = [ deploy ]
  }
  
]

