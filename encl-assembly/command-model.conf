subsystem = NFIRAOS
component = encl	

description = ENCL Assembly commands.

receive = [
 {
    name            = init
    description     = """Initialize the assembly and read configuration files. 

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name	          = cooldown
    description	    = """Instruct the Optical Enclosure to start cooling and operate in its cold temperature mode.

*Simpling Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature = WARM | WARMING
<li> state.accessibility = RESTRICTED
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.temperature = COOLING | COLD
</ul>"""  
  }

  {
    name	          = warmup
    description     = """Instruct the Optical Enclosure to start warming and operate in its warm (ambient) temperature mode.

*Simple Command.*

Precondiction:
<ul>
<li> state.cmd != UNINITALIZED
<li> state.temperature = COLD | COOLING
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.temperature = WARMING | WARM
</ul>"""
 }

 {
   name 	          = accessAllowed 
   description	    = """Instruct the Optical Enclosure to personnel access into the enclosure is allowed.  

The unlock doors and ensure there is a suitable environment inside the enclosure is handled by the NFIRAOS Safety System. This command provides adequate lighting and air flow within the enclosure (TBC).

"Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature = WARM
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> if {input allowAccess} 
  <ul>
  <li> then state.accessibility = ACCESSIBLE | RESTRICTED
  <li> else state.accessibility = RESTRICTED
  </ul>
</ul>"""
    args = [
      {
        name	    = allowAccess
        description = specifies whether or not to access to the enclosure is allowed.
        enum	    = [TRUE, FALSE]

      }
    ]
 }

 {
   name		          = allowVibration
   description	    = """Instruct the enclosure as to whether or not it is allowed to cause vibration on the platform.

When not actively running the adaptive optics, this ensures the enclosure will not cause any disruptions within the telescope. 

*Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.adaptiveOptics = OFF
<li> state.accessibility = RESTRICTED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.vibrationAllowed = {input allowVibration}
</ul>"""
    args = [
      {
        name 	    = allowVibration
        description = Indicates whether or not vibration is allowed by the enclosure or if it should run without any vibration to the platform.
        enum        = [TRUE, FALSE]
      }
    ]
 }

 {
   name		          = park
   description	    = """Instructs the optical enclosure to go idle (i.e. park).

This will tell the enclosure to maintain its warm or cold state without any restrictions on its operation.

*Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature != COOLING | WARMING
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.adaptiveOptics = OFF
<li> state.vibrationAllowed = TRUE
</ul>"""

 }

 {
   name		          = enableAdaptiveOptics
   description	    = """Instruct the enclosure that the Adaptive Optics system is to be activated and set the conditions appropriately.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature = COLD | WARM
<li> state.accessibility = RESTRICTED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> if {input enableOptics} 
  <ul>
  <li> state.adaptiveOptics = ON 
  <li> state.vibrationAllowed = FALSE
  </ul>
<li> else
  <ul>
  <li> state.adaptiveOptics = OFF
  </ul>
</ul>"""
    args = [
      {
        name        = enableOptics
        description = Indicates whether to enable the adaptive optics "observing" mode or to turn it off.
        enum        = [TRUE, FALSE]
      }
    ]
 }

 {
   name             = shutdownPlc
   description      = """Instruct the enclosure controller to place the enclosure in a "maintain" state and shut down the PLC.

TBD: How do we start the PLC again?

*Discrete Command.*

Precondition:
<ul>
<li> TBD
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
 }

]

