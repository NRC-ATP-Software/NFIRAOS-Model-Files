subsystem = NFIRAOS
component = encl	

description = ENCL Assembly commands.

receive = [
 {
    name            = init
    description     = """Immediate Command.

Initialize the assembly and read configuration files. The configuration name must be specified if a configuration version is specified. 

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]

  }


  {
    name	    = cooldown
    description	    = """Submit Command.
    
Instruct the Optical Enclosure to start cooling and operate in its cold temperature mode.

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature = WARM | WARMING
<li> state.accessibility = RESTRICTED
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.temperature = COOLING
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.temperature = COLD
</ul>"""  
  }

  {
    name	    = warmup
    description     = """Submit Command.

Instruct the Optical Enclosure to start warming and operate in its warm (ambient) temperature mode.

Precondiction:
<ul>
<li> state.cmd != UNINITALIZED
<li> state.temperature = COLD | COOLING
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.temperature = WARMING
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.temperature = WARM
</ul>"""
 }

 {
   name 	    = allowAccess
   description	    = """Submit Command.

Instruct the Optical Enclosure to allow personnel access into the enclosure.  This will unlock doors and ensure there is a suitable environment inside the enclosure with adaquate lighting and air flow.

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature = WARM
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.accessibility = ACCESSIBLE | RESTRICTED
</ul>"""

    args = [
      {
        name	    = allowAccess
        description = specifies whether or not to allow access to the enclosure.
        enum	    = [TRUE, FALSE]

      }
    ]
 }

 {
   name		    = allowVibration
   description	    = """Submit Command.

Instruct the enclosure as to whether or not it is allowed to cause vibration on the platform.  When not actively running the adaptive optics, this ensures the enclosure will not cause any disruptions within the telescope. 

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.adaptiveOptics = OFF
<li> state.accessibility = RESTRICTED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.vibrationAllowed = TRUE | FALSE
</ul>"""

    args = [
      {
        name 	    = allowVibration
        description = Indicates whether or not vibration is allowed by the enclosure or if it should run without any vibration to the platform.
        enum        = [TRUE, FALSE]
      }
    ]
 }

 {
   name		    = idle
   description	    = """Submit Command

Instructs the optical enclosure to go idle (or park).  This will tell the enclosure to maintain its warm or cold state without any restrictions on its operation.

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature != COOLING | WARMING
<li> state.accessibility != RESTRICTED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.adaptiveOptics = OFF
<li> state.vibrationAllowed = TRUE
</ul>"""

 }

 {
   name		    = enableAdaptiveOptics
   description	    = """Submit Command.

Instruct the enclosure that the Adaptive Optics system is to be activated and set the conditions appropriatly.

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature = COLD | WARM
<li> state.accessibility = RESTRICTED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.adaptiveOptics = ON | OFF
<li> state.vibrationAllowed = TRUE | FALSE
</ul>"""

    args = [
      {
        name        = enableOptics
        description = Indicates whether to enable the adaptive optive "observing" mode or to turn it off.
        enum        = [TRUE, FALSE]
      }
    ]



 }

 {
   name             = shutdown
   description      = """Submit Command.

Instruct the enclosure controller to place the enclosure in a "maintain" state and shut down.

Precondition:
<ul>
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
</ul>"""

 }

]

