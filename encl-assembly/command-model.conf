subsystem = NFIRAOS
component = encl	

description = ENCL Assembly commands.

receive = [
 {
    name            = init
    description     = """Initialize the assembly and read configuration files. 

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name	          = cooldown
    description	    = """Instruct the Optical Enclosure to start cooling and operate in its cold temperature mode.

*Simpling Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature = WARM | WARMING
<li> state.accessibility = RESTRICTED
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.temperature = COOLING | COLD
</ul>"""  
  }

  {
    name	          = warmup
    description     = """Instruct the Optical Enclosure to start warming and operate in its warm (ambient) temperature mode.

*Simple Command.*

Precondiction:
<ul>
<li> state.cmd != UNINITALIZED
<li> state.temperature = COLD | COOLING
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.temperature = WARMING | WARM
</ul>"""
 }

 {
   name 	          = allowAccess 
   description	    = """Instruct the Optical Enclosure to personnel access into the enclosure is allowed.  

The unlock doors and ensure there is a suitable environment inside the enclosure is handled by the NFIRAOS Safety System. This command provides adequate lighting and air flow within the enclosure (TBC).

"Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature = WARM
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> if {input allowAccess} 
  <ul>
  <li> then state.accessibility = ACCESSIBLE | RESTRICTED
  <li> else state.accessibility = RESTRICTED
  </ul>
</ul>"""
    args = [
      {
        name	    = allowAccess
        description = specifies whether or not to access to the enclosure is allowed.
        enum	    = [TRUE, FALSE]

      }
    ]
 }

 {
   name		    = quiet
   description	    = """Instruct the enclosure to actively run in quiet mode.

When in quiet mode, the enclosure will not cause any disruptions such as vibration within the telescope.  When the optical enclosure is running in quiet mode, the AHU and internal fans, and all vabration causing equipment will be stopped.  Quiet mode is used whenever the telescope is observing or requires no vibration is caused to the platform or internal components.  

*Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.adaptiveOptics = OFF
<li> state.accessibility = RESTRICTED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.quiet = {input enableQuietOperation}
<li> state.standby = false
</ul>"""
    args = [
      {
        name 	    = enableQuietOperation
        description = Indicates whether or not vibration is allowed by the enclosure or if it should run without any vibration to the platform.
        enum        = [TRUE, FALSE]
      }
    ]
 }

 {
   name		    = standby
   description	    = """Instructs the optical enclosure to go standby mode (i.e. park).

This will tell the enclosure to maintain its warm or cold state and run in a lower power state.  Generally, this indicates that the optical enclosure components will not be needed for an extended period of time and is instructed to hibernate until it is needed again.

*Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature != COOLING | WARMING
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.standby = {input enableStandby}
<li> state.quiet = FALSE
</ul>"""
    args = [
      {
        name 	    = enableStandby
        description = Indicates if the enclosure should enter standby mode (TRUE) or leave standby mode (false).
        enum        = [TRUE, FALSE]
      }
    ]
 }

 {
   name             = shutdownPlc
   description      = """Instruct the enclosure controller to place the enclosure in a "maintain" state and shut down the PLC.

TBD: How do we start the PLC again?

*Discrete Command.*

Precondition:
<ul>
<li> TBD
</ul>	
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
 }

]

