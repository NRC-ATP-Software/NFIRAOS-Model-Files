subsystem = NFIRAOS
component = rtcRole

description = RTC Role Assignment Assembly commands or TBD.

receive = [
 {
    name            = init
    description     = """Initialize the assembly and read configuration files. The configuration name must be specified if a configuration version is specified. (engineering)

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

The assembly will automatically connect to the Role Assignment Daemons on all RTC servers as part of initialization, and assert the default server configuration described in its configuration file. This operation will not have any impact on RTC servers if they are already running in the correct roles.

*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.serverConfig = UNKNOWN
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.rtc = TRUE
<li> state.serverConfig = {default serverConfig}
</ul>"""
    args = [
       {
        name        = configName
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string
      }
    ]
  }
  
  {
    name            = select
    description     = """The select command configures the full set of RTC server role assignments through a labeled server configuration.

For the NOMINAL configuration, all of the servers are functioning, and there is one spare (idle) server with no assigned role.

The S_SWAPPED configuration is identical to NOMINAL, except that it swaps the assignments of the RTS/G and RTS/L roles (providing a method to more uniformly use the disk space on each of the storage enhanced servers).

The remaining configurations correspond to individual servers going off-line (either for maintenance, or hardware failures).

Each named configuration is expanded in the assembly configuration files to define precise role-server mappings.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.serverConfig = UNKNOWN
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.rtc = TRUE
<li> state.serverConfig = {input serverConfig}
</ul>
"""
    args = [
      {
        name        = serverConfig
        description = "Labeled server configuration (full set of RTC server role assignments) to use."
        enum        = [ NOMINAL, B1_OFFLINE, B2_OFFLINE, B3_OFFLINE, B4_OFFLINE, B5_OFFLINE, B6_OFFLINE, B7_OFFLINE, N1_OFFLINE, N2_OFFLINE, S1_OFFLINE, S2_OFFLINE, S_SWAPPED ]
      }
    ]
  }

{
    name            = custom
    description     = """The custom command configures the full set of RTC server role assignments based on a user specified server configuration file. (engineering)

This command is intended for engineering use or when multiple RTC servers are unavailable, by creating situation specific server role assignments. The server configuration file must be in the TMT Configuration Service and in the same format as labeled server configuration files used by the select command.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.serverConfig = UNKNOWN
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.rtc = TRUE
<li> state.serverConfig = CUSTOM
</ul>
"""
    args = [
       {
        name        = configName
        description = Name of the server configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the server configuration file to get from the TMT Configuration Service
        type        = string
      }
    ]
  }

  {
    name            = shutdown
    description     = """The shutdown command stops all NRTC software, on the NRTC servers, in preparation for powering off of the servers. (engineering)

Prior to shutting down the NRTC software, this command will stop the NRTC pipeline.

Discussion: The powering off of the actual server machine is under control of the Power Assembly which has access to the NRTC server power bars.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.rtc = false
</ul>"""
  }

]
