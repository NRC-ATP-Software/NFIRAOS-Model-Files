subsystem = NFIRAOS
component = lgsWfs

description = LGS WFS Assembly commands.

receive = [
  
  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. 

This command will internally trigger a stop if required.

The configuration file will specify the following for all 6 LGS WFSs:
<ul>
<li> enable/disable LGS WFS
<li> ip/port of LGS WFS cameras
<li> other TBD quasi-static configuration parameters
</ul>

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs[enabled WFS] = ACTIVE | UNKNOWN
<li> state.wfs[disabled WFS] = DISABLED
<li> state.readout[disabled WFS] = NOTREADY | UNKNOWN
  </ul>"""
    args = [
      {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """Initializes all a specified LGS WFS. 

This command will internally trigger a stop if required. If no WFSs are specified in the input, then all enable LGS WFSs are datumed.
  
*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.wfs[specified WFS] == ACTIVE
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.readout[specified WFS] = INITIALIZED
</ul>"""
     args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to initialize, 'ALL' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
    ]
  }

  {
    name            = stop
    description     = """Cancel the discrete type command and abort any current exposures on all specified LGS WFSs.

If no WFSs are specified in the input, then all LGS WFSs are stopped.
  
*Discrete Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.wfs[specified WFS] == ACTIVE
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.readout[enabled WFS] = NOTREADY | INITIALIZED | IDLE
</ul>"""
    args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to initialize, 'ALL' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
    ]
  }

  {
    name            = configure
    description     = """Command configures the specified LGS WFS.
  
If no WFSs are specified in the input, then all enabled LGS WFSs are configured.

*Simple Command."

Precondition:
<ul>
<li> state.cmd != READY
<li> state.readout[specified WFS] = INITIALIZED | IDLE 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.readout[specified WFS] = IDLE
</ul>"""
    args = [
       {
        name        = wfs 
        description = "specify which LGS WFS to configure, 'ALL' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
      {
        name        = integration
        description = integration time
        type        = double
        units       = seconds
      }
      {
        name        = frameRate
        description = number of frames per second when in continuous mode
        type        = double
        units       = seconds
      }
    ]
    requiredArgs = [ integration, frameRate ]
  }


  {
    name            = mode
    description     = """Set the readout mode of the specified LGS WFS.

Setting the mode to idle will abort the any exposure in progress. If no WFSs are specified in the input, then the mode is set for all enabled LGS WFSs.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != READY
<li> state.readout[specified WFS] = IDLE | CONTINUOUS | SINGLE | TRIGGERED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> if (mode == SINGLE) state.readout[specified WFS] = SINGLE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> if (mode == CONTINUOUS) state.readout[specified WFS] = CONTINUOUS
<li> if (mode == TRIGGERED) state.readout[specified WFS] = TRIGGERED
<li> if (mode == IDLE | SINGLE) state.readout[specified WFS] = IDLE
</ul>"""
    args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to set the mode, 'ALL' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
      {
        name        = mode
        description = desired readout mode
        enum        = [ IDLE, CONTINUOUS, SINGLE, TRIGGERED ]
      }
    ]
    requiredArgs = [ mode ]
  }

  {
    name            = read
    description     = """Engineering command to read a single frame from the specified LGS WFS.

If no WFSs are specified in the input, then all enabled LGS WFSs are read.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd = READY
<li> state.readout[specified WFS] = IDLE
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.readout[specified WFS] = SINGLE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.readout[specified WFS] = IDLE
</ul>"""
    args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to set the mode, 'ALL' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
    ]
  }

]

