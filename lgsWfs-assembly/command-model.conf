subsystem = NFIRAOS
component = lgsWfs

description = LGS WFS Assembly commands.

receive = [
  
  {
    name            = init
    description     = """
Request Command.

Prepares the assembly for operation and reads configuration files. The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

The configuration file will specify the following for all 6 LGS WFSs:
<ul>
<li> enable/disable LGS WFS
<li> ip/port of LGS WFS cameras
<li> other TBD quasi-static configuration parameters
</ul>

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

Precondition:
<ul>
<li> state.cmd != busy
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.wfs[disabled WFS] = disabled
</ul>
    """
    args = [
      {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """
Submit Command.

Initializes all a specified LGS WFS. This command will internally trigger a stop if required.

If no WFSs are specified in the input, then all enable LGS WFSs are datumed.
  
Precondition:
<ul>
<li> state.cmd = ready | error
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.wfs[specified WFS] = initialized
</ul>
    """
     args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to initialize, 'all' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, all ] 
      }
    ]
  }

  {
    name            = stop
    description     = """
Request Command.

Cancel the current submit type command and abort any current exposures on all specified LGS WFSs.

If no WFSs are specified in the input, then all LGS WFSs are stopped.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.wfs[enabled WFS] = initialized | idle
</ul>
    """
    args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to initialize, 'all' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, all ] 
      }
    ]
  }

  {
    name            = configure
    description     = """
Request Command.

Command configures the specified LGS WFS.
  
If no WFSs are specified in the input, then all enabled LGS WFSs are configured.

Precondition:
<ul>
<li> state.cmd = ready | error
<li> state.wfs[specified WFS] = initialized | idle 
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.wfs[specified WFS] = idle
</ul>
    """
    args = [
       {
        name        = wfs 
        description = "specify which LGS WFS to configure, 'all' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, all ] 
      }
      {
        name        = integration
        description = integration time
        type        = double
        units       = seconds
      }
      {
        name        = frameRate
        description = number of frames per second when in continuous mode
        type        = double
        units       = seconds
      }
    ]
    requiredArgs = [ integration, frameRate ]
  }


  {
    name            = mode
    description     = """
Request Command.

Set the readout mode of the specified LGS WFS.

Setting the mode to idle will abort the any exposure in progress.

If no WFSs are specified in the input, then the mode is set for all enabled LGS WFSs.

Precondition:
<ul>
<li> state.cmd = ready | error
<li> state.wfs[specified WFS] = idle | continuous | single | triggered
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> if (mode == single) state.wfs[specified WFS] = single
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> if (mode == continuous) state.wfs[specified WFS] = continuous
<li> if (mode == triggered) state.wfs[specified WFS] = triggered
<li> if (mode == idle | single) state.wfs[specified WFS] = idle
</ul>
    """
    args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to set the mode, 'all' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, all ] 
      }
      {
        name        = mode
        description = desired readout mode
        enum        = [ idle, continuous, triggered, single ]
      }
    ]
    requiredArgs = [ mode ]
  }

  {
    name            = read
    description     = """
Submit Command.

Engineering command to read a single frame from the specified LGS WFS.

If no WFSs are specified in the input, then all enabled LGS WFSs are read.
  
Precondition:
<ul>
<li> state.cmd = ready | error
<li> state.wfs[specified WFS] = idle
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.wfs[specified WFS] = single
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.wfs[specified WFS] = idle
</ul>
    """
    args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to set the mode, 'all' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, all ] 
      }
    ]
  }

]

