subsystem = NFIRAOS
component = alignTel

description = Alignment Telescope Assembly commands.

receive = [
  
  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files.

This command will internally trigger a stop if required. 

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.
    
*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """Datum the Alignment Telescope stages. 

This command will internally trigger a stop if required.

*Discrete Command.*
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete type command and stops the Alignment Telescope stages.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = DEPLOY | EXTRACT | INTERMEDIATE
</ul>"""
  }

  {
    name            = move
    description     = """Engineering command to move the Alignment Telescope stages to the specified positions.

The Alignment Telescope stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = DEPLOY | EXTRACT | INTERMEDIATE
</ul>"""
    args = [
      {
        name        = stage1
        description = target stage 1 position.
        type        = double
      }
      {
        name        = stage2
        description = target stage 2 position.
        type        = double
      }
    ]
  }


  {
    name            = select
    description     = """Position Alignment Telescope with respect to the optical path.

The Alignment Telescope stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = DEPLOY | EXTRACT 
</ul>"""
    args = [
      {
        name        = select
        description = deployment state of the alignment telescope
        enum        = [ DEPLOY, EXTRACT ] 
      }
    ]
    requiredArgs = [ select ]
  }

]

