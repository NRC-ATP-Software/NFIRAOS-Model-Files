subsystem = NFIRAOS
component = at

description = Alignment Telescope (AT) Assembly commands.

receive = [
  
  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files.

This command will internally trigger a stop if required. 

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.
    
*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """Datum the AT stages. 

This command will internally trigger a stop if required.

*Discrete Command.*
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete type command and stops the Alignment Telescope stages.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = NFIRAOS | M3 | EXTRACT | INTERMEDIATE
</ul>"""
  }

  {
    name            = move
    description     = """Engineering command to move the AT stages to the specified positions.

The Alignment Telescope stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select =  NFIRAOS | M3 | EXTRACT | INTERMEDIATE
</ul>"""
    args = [
       {
        name        = deploy
        description = "target position of the AT deploy stage."
        type        = double
        units       = mm
      }
      {
        name        = rotation
        description = "target position AT rotation stage."
        type        = double
        units       = degree
      }
    ]
  }


  {
    name            = select
    description     = """Select to deploy or extracts the AT.

When deployed the AT is configured to 'look' into NFIRAOS or back towards M3.

The Alignment Telescope stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = NFIRAOS | M3 | EXTRACT 
</ul>"""
    args = [
      {
        name        = select
        description = deployment state of the alignment telescope
        enum        = [ NFIRAOS, M3, EXTRACT ] 
      }
    ]
    requiredArgs = [ select ]
  }

  {
    name            = source
    description     = """Turn off and on LEDs to illuminate marks on optics.

There are approximately 15 LEDs mounting the various optics within NFIRAOS to illuminate alignment marks on the optics that are visible by the Alignment Telescope. These LEDs are all controlled by a single switch. 

*Simple Command.*
 
Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.source = {input enable}
</ul>"""
    args = [
      {
        name        = enable
        description = target power state of the AT LED sources
        type        = boolean
      }
    ]
  }

]

