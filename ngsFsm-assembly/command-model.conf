subsystem = NFIRAOS
component = ngsFsm

description = NGS FSM Assembly commands.

receive = [
  
{
    name            = init
    description     = """
Request Command.

Prepares the assembly for operation and read configuration files. The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

  
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = unindexed | indexed
</ul>
At Completion:
<ul>
<li> state.cmd = ready
</ul>
    """
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]

  }
  
  {
    name            = datum
    description     = """
Submit Command.

Datum the NGS FSM stage. This command will internally trigger a stop if required.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = indexing
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = indexed
</ul>
    """
  }

  {
    name            = stop
    description     = """
Request Command.

Cancel the current submit type command and stop the NGS FSM stages.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = unindexed | indexed
</ul>
    """
  }

  {
    name            = move
    description     = """
Submit Command.

Engineering command that moves the NGS FSM stage to the specified  position in units of mechanical rotation.
 
At least on input parameter must be specified, all unspecified stages will remain unchanged.

Precondition:
<ul>
<li> state.cmd != uninitialized
<li> state.move = indexed | moving
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = moving
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = indexed
</ul>
    """
    args = [
      {
        name        = tip
        description = target NGS FSM tip stage position.
        type        = double
        units       = degrees of mechanical rotation in local stage coordinate system
      }
      {
        name        = tilt
        description = target NGS FSM tilt stage position.
        type        = double
        units       = degrees of mechanical rotation in local stage coordinate system
      }
    ]
  }

  {
    name            = position
    description     = """
Submit Command.

Engineering command that moves the NGS FSM stage to the specified position in units of image shift.

Precondition:
<ul>
<li> state.cmd != uninitialized
<li> state.move = indexed | moving
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = moving
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = indexed
</ul>
    """
    args = [
      {
        name        = x
        description = target NGS FSM x position
        type        = double
        units       = "mm in plane of FCRS174.5 at reference wavelength"
      }
      {
        name        = y
        description = target NGS FSM y position
        type        = double
        units       = "mm in plane of FCRS174.5 at reference wavelength"
      }
    ]
    requiredArgs = [ x, y ]
  }


  {
    name            = follow
    description     = """
Request Command.

Enable the NGS FSM follow mode. When the follow mode is enabled, the NGS FSM will follow the modulation and dither signal based on the specified inputs. If either the specified amplitude on frequency is zero, then the corresponding signal is signal is disabled.

Either modAmplitude and modFrequency, or ditherAmplitude and ditherFrequency, or all four input parameters must be specified.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
<li> state.move = indexed | moving
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.cmd = continuous | ready
<li> state.move = indexed | moving
<li> state.modulation = true | false
<li> state.dither = true | false
</ul>
  """
  args = [
      {
        name        = modAmplitude 
        description = modulation signal amplitude
        type        = double
        units       = "mm in plane of FCRS174.5 at reference wavelength"
      }
      {
        name        = modFrequency
        description = modulation signal frequency
        type        = double
        units       = Hz
      }
      {
        name        = ditherAmplitude 
        description = dither signal amplitude
        type        = double
        units       = "mm in plane of FCRS174.5 at reference wavelength"
      }
      {
        name        = ditherFrequency
        description = dither signal frequency
        type        = double
        units       = Hz
      }
    ]
  }

]

