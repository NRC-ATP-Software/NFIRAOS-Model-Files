subsystem = NFIRAOS
component = lgsTrombone

description = LGS Trombone Assembly commands.

receive = [
  
{
    name            = init
    description     = """Prepares the assembly for operation and read configuration files. 

This command will internally trigger a stop if required. This command will also the sodium layer estimate, and the clear SS flag.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> status.stream = TCS
<li> state.onTarget = true | false
<li> sodiumLayer.altitude = {default from config file}
<li> sodiumLayer.zenithAngle = {default from config file}
<li> override.zenithAngle = {default from config file}
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]

  }
  
  {
    name            = datum
    description     = """Datum the LGS trombone stage. 

This command will internally trigger a stop if required. The final position of the LGS trombone stage will be set based on the current sodium layer altitude (sodiumLayer.altitude) and zenith angle (sodiumLayer.zenithAngle)

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete or following type command and stop the LGS trombone stage.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true | false
</ul>"""
  }

  {
    name            = move
    description     = """Engineering command that moves the LGS trombone stage to the specified  position.

The LGS trombone stage must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
</ul>"""
    args = [
      {
        name        = position
        description = target LGS trombone stage position.
        type        = double
        units       = mm
      }
    ]
    requiredArgs = [ position ]
  }

  {
    name            = sodiumLayer
    description     = """Set the initial sodium layer altitude value, and move the LGS trombone to the corresponding position range distance, based on the specified zenith angle.

If the angle input parameter is not specified then current value stored in sodiumLayer.zenithAngle will be used to compute the range distance to initially position the trombone.

The LGS trombone stage must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> sodiumLayer.altitude = {input altitude}
<li> sodiumLayer.zenithAngle = {input zenithAngle}
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
</ul>"""
    args = [
      {
        name        = altitude
        description = initial sodium layer altitude estimate.
        type        = double
        units       = km
        minimum     = 85
        maximum     = 235
      }
      {
        name        = zenithAngle
        description = initial zenith angle used to calculate range distance to position the trombone.
        type        = double
        minimum     = 1
        maximum     = 65
        units       = degrees
      }
    ]
    requiredArgs = [ altitude ]
  }

  {
    name            = zenithOverride
    description     = """Sets the zenith angle override variable. 

This command does not stop the follow mode. The command sets the local variable used to override the zenith angle stream. See follow command for more details 

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY | CONTINUOUS
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY | CONTINUOUS
</ul>"""
    args = [
      {
        name        = zenithAngle
        description = initial zenith angle used to calculate range distance to position the trombone.
        type        = double
        minimum     = 1
        maximum     = 65
        units       = degrees
      }
    ]
    requiredArgs = [ zenithAngle ]
  }

  {
    name            = follow
    description     = """Enable the LGS trombone follow mode. 

When the follow mode is enabled, the LGS trombone will track the focus errors from the NRTC, either zenith angle from the TCS or SS LGS Assembly or the override variable, and update the sodium layer altitude and range distance estimations. 

If stream is set to TCS, then the LGS trombone will follow the zenith angle stream from the TCS. If stream mode set to SS, then the LGS trombone will follow the zenith angle stream from the SS LGS Assembly. If stream mode set to OVERRIDE, then the LGS trombone will follow the zenith angle variable that can be updated by the zenithOverride command. If the stream input parameter is not specified, then the follow input stream (state.stream) will not be changed.
  
The LGS trombone stage must be datumed otherwise this command will be rejected.

*Following Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
<li> state.move = true | false
<li> state.stream = {input stream}
<li> state.onTarget = true
<li> sodiumLayer.altitude = {updated based on RTC focus error}
<li> sodiumLayer.zenithAngle = {updated based on TCS stream, SS stream, or override value}
</ul>"""
  args = [
      {
        name        = stream
        description = set which stream to follow
        enum        = [ TCS, SS, OVERRIDE ] 
      }
    ]
  }

  {
    name            = debug
    description     = """Change the assembly debug message level.

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Simple Command.*
 
Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

]

