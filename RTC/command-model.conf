subsystem = NFIRAOS
component = rtc

description = NRTC Assembly commands.

receive = [
 {
    name            = initialize
    description     = """
Request Command.

The initialize command restores NRTC software to the state immediately after a boot-up. This command the stops the NRTC pipeline, via the pipeline_stop command, and will reset all internal states to default values, and clear any configuration parameters. An equivalent result to this command can be achieved by restarting all NRTC software.

<p>
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.config = flase
<li> all other internal parameters set to default values
</ul>
    """
  }

{
    name            = configure
    description     = """
Request Command.

The configure command set the overall correction mode of the NRTC, as well as specifying a corresponding parameter configuration file. On receiving this command the NRTC will stop the NRTC pipeline, via the PIPELINE_STOP command, and then request the specified configuration file from the TMT Configuration Service. Upon receiving the configuration file from the TMT configuration service, the NRTC will parse the configuration data and load it into memory. After the configuration file has been read, the NRTC will (re-)establishes communication with the RPG.
 
The command will also configure which detector input streams will be used for low-order correction. These streams are split into tiers as listed below:<ul>
<li> Tier 0 (optional)  PWFS providing TT measurements for acquisition purposes
<li> Tier 1 (required)  single detector that provides LO TTF(A) measurements 
<li> Tier 2 (optional)  1 to 2 detectors that provide LO TT or LO TTF(A) measurements
<li> Tier 3 (optional)  1 to 4 detectors that provide LOT TT measurements
<li> Tier 3F (optional)  single detector that provides LOT TTF measurements
</ul>
The restrictions for Tier assignments are given below:
<ul>
<li> Tier 0 can only be the PWFS
<li> Tier 1 must be either the PWFS or a TTF OIWFS
<li> Tier 2 can be the PWFS or any TT/TTF OIWFS or ODGW
<li> Tier 3 can be any TT OIWFS or ODGW
<li> Tier 3F can only be a TTF OIWFS
<li> a single detector can be assigned to multiple tiers
<li> the same detector cannot be assigned to the same tier twice
<li> the same detector cannot be assigned to both Tier 1 and Tier 2
<li> the same detector cannot be assigned to both Tier 3 and Tier 3F
</ul>
For Tiers 2 and 3, the order in which the detectors are specified defines the order in which the gradients will be assembled for low-order and low-order truth mode reconstruction. If a tier entry is specified as NONE, then that entry is skipped while assembling the low-order gradient vector.

The wavefront corrector rate must be a multiple of the high-order loop rate and the steady-state low-order loop rate. The steady-state low-order loop rate must be a multiple of the steady-state low-order truth loop rate.
 
Discussion: There should be a convention to tell the NRTC to use a local version of the configure file(s) for engineering/integration purposes when the TMT configuration service is not yet available. This could be embedded in the configuration name/version.

<p>
Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.config = true
<li> config.name = {input}
<li> config.version = {input}
<li> lgsState.enable = {input}
<li> loop.rateHo = {input}
<li> loop.rateLo = {input}
<li> loop.rateLot = {input}
<li> loop.rateWc = {input}
<li> loop.tier1 = {input}
<li> loop.tier2 = {input}
<li> loop.tier3 = {input}
<li> loop.tier3f = {input}
</ul>
    """
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
      {
        name        = lgsEnable
        description = "If an enable flag is true then the RTC will use the corresponding pixel stream for high-order correction. For NGS or SL mode, all LGS WFSs should be disabled. The array is ordered LGS WFS [A B C D E F]."
        type        = array
        dimensions: [6]
        items = {
          type      = boolean
        }
      }
      {
        name        = rateHo
        description = "high-order loop rate"
        type        = double
        maximum     = 800
        minimum     = 0.1
        units       = Hz 
      }
      {
        name        = rateLo
        description = "low-order loop rate"
        type        = double
        maximum     = 800
        minimum     = 0.1 
        units       = Hz
      }
      {
        name        = rateLot
        description = "low-order truth loop rate"
        type        = double
        maximum     = 800
        minimum     = 0.1 
        units       = Hz
      }
      {
        name        = rateWc
        description = "wavefront corrector loop rate"
        type        = double
        maximum     = 800
        minimum     = 0.1 
        units       = Hz
      }
      {
        name        = tier1
        description = "Tier 1 detector." 
        enum        = [ PWFS, OIWFSA, OIWFSB, OIWFSC ]
      }
      {
        name        = tier2
        description = "Tier 2 detectors. The array is ordered Tier 2 [A B]"
        type        = array
        dimensions: [2]
        items = {
          enum      = [ NONE, PWFS, OIWFSA, OIWFSB, OIWFSC, ODGW1, ODGW2, ODGW3, ODGW4 ]
        }
      }
      {
        name        = tier3
        description = "Tier 3 detectors. The array is ordered Tier 3 [A B C D]"
        type        = array
        dimensions: [4]
        items = {
          enum      = [ NONE, OIWFSA, OIWFSB, OIWFSC, ODGW1, ODGW2, ODGW3, ODGW4 ] 
        }
      }
      {
        name        = tier3f
        description = "Tier 3F detector."
        enum        = [ NONE, OIWFSA, OIWFSB, OIWFSC ]
      }
    ]
  }

  {
    name            = simulate
    description     = """
Request Command.

At least on input parameter must be specified, all unspecified stages will remain unchanged.

<p>
Precondition:
<ul>
<li> state.cmd = READY 
<li> loop.ready = false
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> sim.dm0 = {input dm0}
<li> sim.dm11 = {input dm11}
<li> sim.lgs = {input lgs}
<li> sim.lgsf = {input lgsf}
<li> sim.odgw = {input odgw}
<li> sim.oiwfs = {input oiwfs}
<li> sim.pwfs = {input pwfs}
<li> sim.rpg = {input rpg}
<li> sim.tts = {input tts}
<li> sim.turbulence = {input turbulence}
</ul>
    """
    args = [
      {
        name        = dm0 
        description = "Simulated DM0 flag."
        type        = boolean
      }
      {
        name        = dm11 
        description = "Simulated DM11 flag."
        type        = boolean
      }
      {
        name        = lgs 
        description = "Simulated LGS WFS flag. The array is ordered LGS WFS [A B C D E F]."
        type        = array
        dimensions: [6]
        items = {
          type      = boolean
        }
      }
      {
        name        = lgsf 
        description = "Simulated LGSF FSMs flag."
        type        = boolean
      }
      {
        name        = odgw
        description = "Simulated ODGW flag. The array is ordered ODGW [1 2 3 4]."
        type        = array
        dimensions: [4]
        items = {
          type      = boolean
        }
      }
      {
        name        = oiwfs
        description = "Simulated OIWFS flag. The array is ordered OIWFS [A B C]."
        type        = array
        dimensions: [3]
        items = {
          type      = boolean
        }
      }
      {
        name        = pwfs 
        description = "Simulated PWFS flag."
        type        = boolean
      }
      {
        name        = rpg 
        description = "Simulated RPG flag."
        type        = boolean
      }
      {
        name        = tts 
        description = "Simulated TTS flag."
        type        = boolean
      }
      {
        name        = turbulence  
        description = "Simulated turbulence flag."
        type        = boolean
      }
    ]
  }



]

