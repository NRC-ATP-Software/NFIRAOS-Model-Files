subsystem = NFIRAOS
component = tg

description = TG Assembly commands.

receive = [
  
  {
    name            = init
    description     = """
Request Command.

Prepares the assembly for operation and reads configuration files. The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = unindexed | indexed
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.deploy = unknown
</ul>
    """
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """
Submit Command.

Datum the TG stage. This command will internally trigger a stop if required.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = indexing
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = indexed
<li> state.deploy = false
</ul>
    """
  }

  {
    name            = stop
    description     = """
Request Command.

Cancel the current submit type command and stops the TG stage.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = unindexed | indexed
<li> state.deploy = true | false
</ul>
    """
  }

  {
    name            = move
    description     = """
Submit Command.

Engineering command to moves the TG stage to the specified position.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
<li> state.move = indexed | moving
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = moving
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = indexed
<li> state.deploy = true | false
</ul>
    """
    args = [
      {
        name        = position
        description = target TG stage position.
        type        = double
        units       = mm
      }
    ]
    requiredArgs = [ position ]
  }


  {
    name            = extract
    description     = """
Submit Command.

Extract TG stage from the optical path. This command will also stop the following mode.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
<li> state.move = indexed | moving
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = moving
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = indexed
<li> state.deploy = false
</ul>
    """
  }

  {
    name            = follow
    description     = """
Request Command.

Enable the TG follow mode. When the follow mode is enabled, the TG will move in a trapezoidal velocity profile in one direction and then following the same profile in the opposite and repeat as long as the follow mode is enabled. The maximum speed of the TG is determined base on the specified wind speed   
  
Precondition:                             
<ul>
<li> state.cmd != uninitialized
<li> state.move = indexed | moving
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.cmd = continuous
<li> state.move = indexed | moving
<li> state.deploy = true
</ul>
  """
    args = [
      {
        name        = windSpeed
        description = "wind speed to simulate, this drives the maximum speed at which the phase screen will travel."
        type        = double
        units       = "m/s"
      }
    ]
    requiredArgs = [ windSpeed ]
  }

]

