subsystem = NFIRAOS
component = ssNgs

description = SS NGS Assembly commands.

receive = [
 
  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files.

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.attenuatorOnTarget = true | false
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

{
    name            = datum
    description     = """Datum all the SS NGS stages, including the FPM. 

This command will internally trigger a stop if required.
 
This command will clear all offsets associated with the FPM.
 
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.source = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT
<li> state.attenuatorOnTarget = true
<li> state.magnitude[7] = TBD
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete type command, stop all SS NGS stages and turn off the NGS simulation source.

*Discrete Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.intensityFixed = false
<li> state.select = EXTRACT | FPM | NGS | INTERMEDIATE
<li> state.attenuatorOnTarget = true | false
</ul>"""
  }

  {
    name            = move
    description     = """Engineering command that moves individual SS NGS stages to the specified positions. 

This includes set motorized attenuators. The NGS simulation source stage and FPM-Y stage move along the same track and can interfere with one another. Therefore given the current and target positions of the NGS simulation source stage and FPM-Y stage, some combination are not allowed and will be reject.
  
This command will clear all offsets associated with the FPM.

At least one input parameter must be specified, all unspecified stages will remain unchanged.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
<li> if (NGS source stage target is specified)  state.source = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT | FPM | NGS | INTERMEDIATE
<li> state.attenuatorOnTarget = true
<li> state.magnitude[7] = &lt; magnitude estimated base on input attenuation level &gt;
</ul>"""
    args = [
      {
        name        = ngs
        description = target position of the NGS simulation source stage
        type        = double
        units       = mm
      }
      {
        name        = fpmY
        description = target absolute position of the FPM-Y stage
        type        = double
        units       = mm
      }
      {
        name        = fpmX
        description = target absolute position of the FPM-X stage
        type        = double
        units       = mm
      }
      {
        name        = attenuation
        description = target attenuator stage position
        type        = double
        units       = mm
      }
    ]
  }


 {
    name            = deploy
    description     = """Select to deploy the NGS simulation sources, deploy the FPM, or extract both. 

This command will clear all offsets associated with the FPM.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
<li> if (select != NGS ) state.source = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT | FPM | NGS
</ul>"""
    args = [
      {
        name        = select
        description = "choice of the NGS simulation sources, the FPM, or extract both"
        enum        = [ EXTRACT | FPM | NGS ] 
      }
    ]
    requiredArgs = [ select ]
  }

  {
    name            = source
    description     = """Turn off and on the NGS source and/or set the magnitude of the variable sources. 

The NGS simulation source stage must already be deployed if the source is being enabled. 
 
At least one input parameter must be specified, all unspecified inputs will remain unchanged. Meaning you can set the attenuation before turn on the light source and then turn on the source without changing the attenuation.

*Discrete Command.*
 
Precondition:
<ul>
<li> state.cmd = READY
<li> if {input enable = true}, then state.select = NGS
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> if {input attenuation is specified}, state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.source = {input enable}
<li> if {input attenuation is specified}, then
  <ul>
  <li> state.attenuatorOnTarget = true
  <li> state.magnitude[7] = {magnitude estimated base on input attenuation}
  </ul>
</ul>"""
    args = [
      {
        name        = enable
        description = target power state of the NGS Tungsten-Halogen source
        type        = boolean
      }
      {
        name        = attenuation
        description = target attenuation level for the variable NGS simulation sources
        type        = double
        units       = dB
      }
    ]
  }

  {
    name            = fpmDither
    description     = """Move the FPM to the specified position in the 3x3 dithering grid pattern. 

The grid index value of 0,0 corresponds to the FPM reference (deployed) position, centred on the central pinhole. The FPM must already be deployed to dither the FPM.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.select = FPM
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = FPM | INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = FPM
</ul>
    """
    args = [
      {
        name        = indexX
        description = "X index of the 3x3 position matrix."
        type        = integer
        maximum     = 1
        minimum     = -1 
      }
      {
        name        = indexY
        description = "Y index of the 3x3 position matrix."
        type        = integer
        maximum     = 1
        minimum     = -1 
      }
    ]
  }

  {
    name            = fpmOffsetPinhole
    description     = """Offset the FPM by one pinhole in the specified direction. 

A pinhole offset of 0,0 corresponds to the FPM reference (deployed) position, centred on the central pinhole. The FPM must already be deployed to offset the FPM.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.select = FPM
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = FPM | INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = FPM
</ul>
    """
    args = [
      {
        name        = pinholeX
        description = "Number of pinholes to offset the FPM in the X direction."
        type        = integer
        maximum     = 1
        minimum     = -1 
      }
      {
        name        = pinholeY
        description = "Number of pinholes to offset the FPM in the Y direction."
        type        = integer
        maximum     = 1
        minimum     = -1 
      }
    ]
  }

  {
    name            = fpmOffsetPitch
    description     = """Offset the the FPM with respect to the FPM reference (deployed) central pinhole. 

The FPM must already be deployed to offset the FPM.
  
At least one input parameter must be specified, all unspecified stages will remain unchanged.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.select = FPM
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = FPM | INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = FPM
</ul>
    """
    args = [
      {
        name        = offsetX
        description = target relative position offset of the FPM in X
        type        = double
        units       = nominal pinhole pitch
      }
      {
        name        = offsetY
        description = target relative position offset of the FPM in Y
        type        = double
        units       = nominal pinhole pitch
      }
    ]
  }

  {
    name            = debug
    description     = """Change the assembly debug message level.

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Simple Command.*
 
Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

]

