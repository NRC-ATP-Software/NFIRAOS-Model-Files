subsystem = NFIRAOS
component = bs

description = BS Assembly commands.

receive = [
  
  {
    name            = init
    description     = """Request Command.

Prepares the assembly for operation and reads configuration files. The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.
    
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = UNINDEXED | INDEXED
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """Submit Command.

Datum the BS stage. This command will internally trigger a stop if required.
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = INDEXING
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = INDEXED
<li> state.select = {default from config file}
</ul>"""
  }

  {
    name            = stop
    description     = """Request Command.

Cancel the current submit type command and stops the BS stage.
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = UNINDEXED | INDEXED
<li> state.select = SCIENCE | ENGINEERING | INTERMEDIATE
</ul>"""
  }

  {
    name            = move
    description     = """Submit Command.

Engineering command to move the BS stage to the specified positions.

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.move = INDEXED | MOVING
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = MOVING
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = INDEXED
<li> state.select = SCIENCE | ENGINEERING | INTERMEDIATE
</ul>"""
    args = [
      {
        name        = position
        description = target BS stage position.
        type        = double
        units       = degrees
      }
    ]
    requiredArgs = [ position ]
  }


  {
    name            = select
    description     = """Submit Command.

Position either the science or engineering beam-splitter in the optical path.

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.move = INDEXED | MOVING
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = MOVING
<li> state.select = INTERMEDIATE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = INDEXED
<li> state.select = SCIENCE | ENGINEERING 
</ul>"""
    args = [
      {
        name        = select
        description = choice of either the science or engineering beam-splitter
        enum        = [ SCIENCE, ENGINEERING ] 
      }
    ]
    requiredArgs = [ select ]
  }

]

