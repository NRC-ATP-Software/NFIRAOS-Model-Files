subsystem = NFIRAOS
component = pwfs

description = PWFS Assembly commands.

receive = [
  {
    name            = init
    description     = """
Request Command.

Prepares the assembly for operation the assembly and read configuration files. The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

The configuration file will specify the following:
<ul>
<li> ip/port of PWFS camera
<li> other TBD quasi-static configuration parameters
</ul>

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.
  
Precondition:
<ul>
<li> state.cmd != busy
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
</ul>
    """
    args = [
      {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """
Request Command.

Initializes the PWFS. This command will internally trigger a stop if required.
  
Precondition:
<ul>
<li> state.cmd = ready | error
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.wfs = initialized
</ul>
    """
  }

 {
    name            = stop
    description     = """
Request Command.

Cancel the current submit type command and abort any current exposures on the PWFS.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.wfs = initialized | idle
</ul>
    """
  }


  {
    name            = configure
    description     = """
Request Command.

Configures the PWFS.
  
Precondition:
<ul>
<li> state.cmd = ready | error
<li> state.wfs = initialized | idle 
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.wfs = idle
</ul>
"""
    args = [
      {
        name        = integration
        description = integration time
        type        = double
        units       = seconds
      }
      {
        name        = frameRate
        description = number of frames per second when in continuous mode
        type        = double
        units       = seconds
      }
      {
        name        = binning
        description = row and column binning
        enum        = [1, 2, 4, 8, 16]
      }
    ]
    requiredArgs = [ integration, frameRate, binning ]
  }

  {
    name            = mode
    description     = """
Request Command.

Set the readout mode of the PWFS.

Setting the mode to idle will abort the any exposure in progress.
  
Precondition:
<ul>
<li> state.cmd = ready | error
<li> state.wfs = idle | continuous | single | triggered
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> if (mode == single) state.wfs = single
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> if (mode == continuous) state.wfs = continuous
<li> if (mode == triggered) state.wfs = triggered
<li> if (mode == idle | single) state.wfs = idle
</ul>
    """
    args = [
      {
        name        = mode
        description = desired readout mode
        enum        = [ idle, continuous, triggered, single ]
      }
    ]
    requiredArgs = [ mode ]
  }

 {
    name            = read
    description     = """
Submit Command.

Engineering command to read a single frame from the PWFS.
  
Precondition:
<ul>
<li> state.cmd = ready | error
<li> state.wfs = idle
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.wfs = single
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.wfs = idle
</ul>
    """
  }

]

