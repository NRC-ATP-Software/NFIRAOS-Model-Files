subsystem = NFIRAOS
component = pwfs

description = PWFS Assembly commands.

receive = [
  {
    name            = init
    description     = """
    Request Command.

    Prepares the assembly for operation the assembly and read configuration files. The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

    If the configuration name is not specified, then a default configuration name and version is used. If the configuration version is not specified, then the default version is used for the specified configuration name.

    The configuration file will specify the following:
        * ip/port of PWFS camera
        * ip/port destination for upper-half of PWFS pixels
        * ip/port destination for lower-half of PWFS pixels
        * other TBD quasi-static configuration parameters
<html>
    <p>
  Precondition:
  <ul>
  <li> state.cmd != busy
  </ul>

  <p>
  Execution:
  <ul>
  <li> state.cmd = busy
  </ul>

  <p>
  At Completion:
  <ul>
  <li> state.cmd = ready
  </ul>
</html>
    """
    args = [
      {
        name        = configuration name 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configuration version
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """
    Request Command.

    Initializes the PWFS. This command will internally trigger a stop if required.
<html>
  <p>
  Precondition:
  <ul>
  <li> state.cmd = ready | error
  </ul>

  <p>
  Execution:
  <ul>
  <li> state.cmd = busy
  </ul>

  <p>  
  At Completion:
  <ul>
  <li> state.cmd = ready
  <li> state.wfs = initialized
  </ul>
</html>
    """
  }

 {
    name            = stop
    description     = """
    Request Command.

    Cancel the current submit type command and abort any current exposures on the PWFS.
<html>
  <p>
  Precondition:
  <ul>
  <li> state.cmd != uninitialized
  </ul>
  
  <p>
  Execution:
  <ul>
  <li> state.cmd = busy
  </ul>

  <p>
  At Completion:
  <ul>
  <li> state.cmd = ready
  <li> state.wfs = initialized | idle
  </ul>
</html>
    """
  }


  {
    name            = configure
    description     = """
    Request Command.

    Configures the PWFS.
<html>
  <p>
  Precondition:
  <ul>
  <li> state.cmd = ready | error
  <li> state.wfs = initialized | idle 
  </ul>

  <p>
  Execution:
  <ul>
  <li> state.cmd = busy
  </ul>

  <p>  
  At Completion:
  <ul>
  <li> state.cmd = ready
  <li> state.wfs = idle
  </ul>
</html>
"""
    args = [
      {
        name        = integration
        description = integration time
        type        = double
        units       = seconds
      }
      {
        name        = frame rate
        description = number of frames per second when in continuous mode
        type        = double
        units       = seconds
      }
      {
        name        = binning
        description = row and column binning
        enum        = [1, 2, 4, 8, 16]
      }

    ]
  }

  {
    name            = mode
    description     = """
    Request Command.

    Set the readout mode of the PWFS.

    Setting the mode to idle will abort the any exposure in progress.
<html>
  <p>
  Precondition:
  <ul>
  <li> state.cmd = ready | error
  <li> state.wfs = idle | continuous | single | triggered
  </ul>
 
  <p>
  Execution:
  <ul>
  <li> state.cmd = busy
  <li> if (mode == single) state.wfs = single
  </ul>

  <p><p>
  
  At Completion:
  <ul>
  <li> state.cmd = ready
  <li> if (mode == continuous) state.wfs = continuous
  <li> if (mode == triggered) state.wfs = triggered
  <li> if (mode == idle | single) state.wfs = idle
  </ul>
</html>
    """
    args = [
      {
        name        = mode
        description = desired readout mode
        enum        = [ idle, continuous, triggered, single ]
      }
    ]
  }

 {
    name            = read
    description     = """
    Submit Command.

    Engineering command to read a single frame from the PWFS.
<html>
  <p>
  Precondition:
  <ul>
  <li> state.cmd = ready | error
  <li> state.wfs = idle
  </ul>
 
  <p>
  Execution:
  <ul>
  <li> state.cmd = busy
  <li> state.wfs = single
  </ul>

  <p><p>
  
  At Completion:
  <ul>
  <li> state.cmd = ready
  <li> state.wfs = idle
  </ul>
</html>
    """
  }

]

