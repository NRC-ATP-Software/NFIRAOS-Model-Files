subsystem = NFIRAOS
component = nssLgs

description = NSS LGS Assembly commands.

receive = [
  
  {
    name            = init
    description     = """
Request Command.

Prepares the assembly for operation and reads configuration files. The configuration name must be specified if a configuration version is specified. This command will internally trigger a stop if required.

If the configuration name is not specified, then a default configuration name and version is used. If the configuration version is not specified, then the default version is used for the specified configuration name.
  
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = unindexed | indexed
</ul>
At Completion:
<ul>
<li> state.cmd = ready
</ul>
    """
    args = [
       {
        name        = configuration name 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configuration version
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

{
    name            = datum
    description     = """
Submit Command.

Datum both the NSS LGS stages. This command will internally trigger a stop if required.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = indexing
<li> state.intensity = 0.0
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = indexed
<li> state.deploy = extract
</ul>
    """
  }

  {
    name            = stop
    description     = """
Request Command.

Cancel the current submit type command, stop all NSS LGS stages and turn off all LGS simulation sources.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = unindexed | indexed
<li> state.deploy = extract | deploy | intermediate
<li> state.intensity = 0.0
</ul>
    """
  }

  {
    name            = move
    description     = """
Submit Command.

Engineering command to move individual NSS LGS stages to the specified positions.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
<li> state.move = indexed | moving
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = moving
<li> state.deploy = intermediate
<li> if (deploy stage target is specified) state.intensity = 0.0
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = indexed
<li> state.deploy = extract | deploy | intermediate
</ul>
    """
    args = [
      {
        name        = deploy
        description = target position of the NSS LGS deploy stage
        type        = double
        units       = degrees
      }
      {
        name        = focus
        description = "target position NSS LGS focus stage, with respect to the FPM reference position"
        type        = double
        units       = mm
        minimum     = 875 
        maximum     = 2515
      }
    ]
  }


  {
    name            = deploy
    description     = """
Submit Command.

Deploy or extracts the LGS simulation sources.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
<li> state.move = indexed | moving
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = moving
<li> state.deploy = intermediate
<li> if (deploy == false) state.intensity = 0.0
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = indexed
<li> state.deploy = extract | deploy 
</ul>
    """
    args = [
      {
        name        = deploy
        description = flag indicating if the LGS simulation sources should be deployed.
        type        = boolean
      }
    ]
  }

  {
    name            = focus
    description     = """
Submit Command.

Set the LGS focus stage based on effective range distance. The LGS simulation sources must already be deployed.
  
Precondition:
<ul>
<li> state.cmd != uninitialized
<li> state.move = indexed | moving
<li> state.deploy = deploy
</ul>
Execution:
<ul>
<li> state.cmd = busy
<li> state.move = moving
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.move = indexed
</ul>
    """
    args = [
      {
        name        = rangeDistance
        description = target effective range distance
        type        = double
        units       = km
      }
    ]
  }

  {
    name            = intensity
    description     = """
Submit Command.
  
Set intensity of the LGS simulation sources. The LGS simulation sources must already be deployed. A LUT (TBC) is used to convert the desired photon flux into a PWM duty cycle that is sent to the LED control electronics. A value of zero will turn off the LGS simulation sources.
  
Precondition:
<ul>
<li> state.cmd = ready | error
<li> state.deploy = deploy
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.intensity = &lt; input intensity &gt; 
</ul>
    """
    args = [
      {
        name        = intensity
        description = target intensity of LGS simulation sources
        type        = double
        units       = photon flux (TBD)
      }
    ]
  }

 {
    name            = pwm
    description     = """
Submit Command.
  
Engineering command to set NSS LGS source intensity based on PWM duty cycle.
  
Precondition:
<ul>
<li> state.cmd = ready | error
<li> state.deploy = deploy
</ul>
Execution:
<ul>
<li> state.cmd = busy
</ul>
At Completion:
<ul>
<li> state.cmd = ready
<li> state.intensity = &lt; intensity estimated base on input PWM duty cycle &gt; 
</ul>
    """
    args = [
      {
        name        = dutyCycle
        description = target PWM duty cycle of the LGS simulation sources 
        type        = double
        units       = %
        minimum     = 0 
        maximum     = 100
      }
    ]
  }

]

