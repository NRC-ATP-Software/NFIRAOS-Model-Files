subsystem = NFIRAOS
component = ngsAdc

description = NGS ADC Assembly commands.

receive = [
  
   {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. 

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Simple Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

   {
    name            = datum
    description     = """Datum the NGS ADC stages and prepares the assembly for operation. 

This command will internally trigger a stop if required. This command will then position the ADC to based on a default power and orientation specified in the configuration file. 
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete or following command and stop all NGS ADC stages.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
</ul>"""
  }

  {
    name            = move
    description     = """Engineering command to move individual NGS ADC stages to the specified positions.
  
At least one input parameter must be specified, an unspecified stage will remain unchanged.

The specified ADC stage(s) must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
</ul>"""
    args = [
      {
        name        = rotationA
        description = target NGS ADC rotation A stage position.
        type        = double
        units       = degrees of mechanical rotation in local stage coordinate system
      }
      {
        name        = rotationB
        description = target NGS ADC rotation B stage position.
        type        = double
        units       = degrees of mechanical rotation in local stage coordinate system
      }
    ]
  }

  {
    name            = setAdc
    description     = """Position the NGS ADC based on specified power and orientation.
 
The ADC stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
</ul>"""
    args = [
      {
        name        = power
        description = target ADC power
        type        = double
        units       = TBD
      }
      {
        name        = orientation
        description = target ADC orientation
        type        = double
        units       = degrees
      }
    ]
    requiredArgs = [ power, orientation ]
  }

  {
    name            = follow
    description     = """Enable the NGS ADC follow mode. 

When the follow mode is enabled, the NGS ADC will track the dispersion parameters from the TCS.

The ADC stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:                             
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
<li> state.move = true | false
<li> state.onTarget = true
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level.

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd = READY | BUSY | CONTINUOUS
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY | BUSY | CONTINUOUS
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }


]

